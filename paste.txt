import React, { useState, useEffect, useCallback } from 'react';
import { View, TextInput, FlatList, Text, Image, StyleSheet, ActivityIndicator } from 'react-native';

// custom debounce
const debounce = (func, delay) => {
  let timeout;
  return (...args) => {
    if (timeout) clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), delay);
  };
};

export default function BookSearchScreen() {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);

  const fetchBooks = async (searchQuery) => {
    if (!searchQuery.trim()) return; // stop when search empty
    setLoading(true);
    try {
      const response = await fetch(`https://openlibrary.org/search.json?q=${encodeURIComponent(searchQuery)}`);
      const data = await response.json();
      setResults(data.docs || []);
    } catch (error) {
      console.error('Error fetching books:', error);
    } finally {
      setLoading(false);
    }
  };

  // debounce version of fetchBooks
  const debouncedFetchBooks = useCallback(debounce(fetchBooks, 500), []);

  const handleChange = (text) => {
    setQuery(text);
    if (text.trim() === '') {
      setResults([]); // clear results when search bar is empty
      return;
    }
    debouncedFetchBooks(text);
  };

  const renderItem = ({ item }) => (
    <View style={styles.card}>
      {item.cover_i ? (
        <Image
          source={{ uri: `https://covers.openlibrary.org/b/id/${item.cover_i}-M.jpg` }}
          style={styles.cover}
        />
      ) : (
        <View style={[styles.cover, styles.noCover]}><Text>No Image</Text></View>
      )}
      <Text style={styles.title} numberOfLines={2}>{item.title}</Text>
      <Text style={styles.author}>{item.author_name ? item.author_name[0] : 'Unknown Author'}</Text>
    </View>
  );

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.input}
        placeholder="Search books..."
        value={query}
        onChangeText={handleChange}
      />
      {loading && <ActivityIndicator style={{ marginVertical: 10 }} />}
      <FlatList
        data={results}
        keyExtractor={(item, index) => index.toString()}
        numColumns={3}
        renderItem={renderItem}
        contentContainerStyle={{ paddingBottom: 80 }} // space for bottom bar
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingTop: 10,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    marginHorizontal: 10,
    marginBottom: 10,
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 8,
  },
  card: {
    flex: 1 / 3,
    alignItems: 'center',
    margin: 5,
  },
  cover: {
    width: 100,
    height: 150,
    borderRadius: 8,
    backgroundColor: '#eee',
  },
  noCover: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    marginTop: 5,
    fontSize: 13,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  author: {
    fontSize: 12,
    color: '#555',
    textAlign: 'center',
  },
});