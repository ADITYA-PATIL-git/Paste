import React, { useState, useEffect } from 'react';
import { View } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import CustomCalendar from '../components/CustomCalendar';
import AttendanceStatusRow from '../components/AttendanceStatusRow';
import SwipeHourBox from '../components/SwipeHourBox';

const Attendance = () => {
  const navigation = useNavigation();
  const today = new Date();

  const months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December',
  ];
  const years = Array.from({ length: 21 }, (_, i) => (today.getFullYear() - 10 + i).toString());

  const [currentMonth, setCurrentMonth] = useState(today.getMonth());
  const [currentYear, setCurrentYear] = useState(today.getFullYear());
  const [selectedDate, setSelectedDate] = useState('');

  const formatDate = (day, month, year) => `${day}-${months[month]}-${year}`;

  const resetToToday = () => {
    setCurrentMonth(today.getMonth());
    setCurrentYear(today.getFullYear());
    setSelectedDate(formatDate(today.getDate(), today.getMonth(), today.getFullYear()));
  };

  useEffect(resetToToday, []);

  useEffect(() => {
    const unsubscribe = navigation.addListener('focus', resetToToday);
    return unsubscribe;
  }, [navigation]);

  const handleDateSelect = day => {
    setSelectedDate(formatDate(day, currentMonth, currentYear));
  };

  const handleMonthChange = direction => {
    if (direction === 'prev') {
      if (currentMonth === 0) {
        setCurrentMonth(11);
        setCurrentYear(prev => prev - 1);
      } else {
        setCurrentMonth(prev => prev - 1);
      }
    } else if (direction === 'next') {
      if (currentMonth === 11) {
        setCurrentMonth(0);
        setCurrentYear(prev => prev + 1);
      } else {
        setCurrentMonth(prev => prev + 1);
      }
    }
  };

  const getDaysInMonth = (month, year) => new Date(year, month + 1, 0).getDate();
  const getFirstDayOfMonth = (month, year) => new Date(year, month, 1).getDay();

  // ðŸ‘‰ Extract only "day-month" from selectedDate (e.g. "31-October")
  const dayMonthOnly = selectedDate.split('-').slice(0, 2).join('-');

  return (
    <View style={{ flex: 1, margin: 26 }}>
      <CustomCalendar
        months={months}
        years={years}
        currentMonth={currentMonth}
        currentYear={currentYear}
        selectedDate={selectedDate}
        today={today}
        onPrevMonth={() => handleMonthChange('prev')}
        onNextMonth={() => handleMonthChange('next')}
        onMonthSelect={month => setCurrentMonth(months.indexOf(month))}
        onYearSelect={year => setCurrentYear(parseInt(year))}
        onDateSelect={handleDateSelect}
        getDaysInMonth={getDaysInMonth}
        getFirstDayOfMonth={getFirstDayOfMonth}
      />
      <View style={{ height: 1, backgroundColor: 'grey', marginVertical: 0 }} />
      <AttendanceStatusRow />
      <SwipeHourBox date={dayMonthOnly} />
    </View>
  );
};

export default Attendance;
